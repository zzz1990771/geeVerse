% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plrq.R, R/qpgee.R
\name{qpgee}
\alias{qpgee}
\title{Quantile Penalized Generalized Estimating Equations (QPGEE)}
\usage{
qpgee(
  x,
  y,
  tau = 0.5,
  nk = rep(1, length(y)),
  worktype = "CS",
  lambda = 0.1,
  betaint = NULL,
  f0 = NULL,
  max_it = 100,
  cutoff = 10^-1
)

qpgee(
  x,
  y,
  tau = 0.5,
  nk = rep(1, length(y)),
  worktype = "CS",
  lambda = 0.1,
  betaint = NULL,
  f0 = NULL,
  max_it = 100,
  cutoff = 10^-1
)
}
\arguments{
\item{x}{A matrix of predictors.}

\item{y}{A numeric vector of response variables.}

\item{tau}{The quantile to be estimated (default is 0.5, the median).}

\item{nk}{A numeric vector indicating the number of observations per subject.}

\item{worktype}{A string specifying the working correlation structure.
Options include "CS" (Compound Symmetry), "AR" (Autoregressive),
"Tri" (Tri-diagonal), and "Ind" (Independent).}

\item{lambda}{The penalty parameter for regularization (default is 0.1).}

\item{betaint}{Initial values for the beta coefficients. If NULL,
non-longitudinal quantile regression is used for initialization.}

\item{max_it}{Maximum number of iterations (default is 100).}

\item{cutoff}{Threshold for coefficient shrinkage (default is 0.1).}
}
\value{
A list containing the following components:
        \itemize{
          \item{beta}{Estimated beta coefficients.}
          \item{g}{Fitted values of the linear predictor.}
          \item{R}{Estimated working correlation matrix.}
          \item{X_selected}{Indices of selected predictors.}
          \item{mcl}{Mean check loss.}
          \item{hbic}{Hannan-Quinn Information Criterion value.}
          \item{converge}{Boolean indicating whether the algorithm converged.}
        }

A list containing the following components:
        \itemize{
          \item{beta}{Estimated beta coefficients.}
          \item{g}{Fitted values of the linear predictor.}
          \item{R}{Estimated working correlation matrix.}
          \item{X_selected}{Indices of selected predictors.}
          \item{mcl}{Mean check loss.}
          \item{hbic}{Hannan-Quinn Information Criterion value.}
          \item{converge}{Boolean indicating whether the algorithm converged.}
        }
}
\description{
This function implements Quantile Penalized Generalized Estimating Equations
(QPGEE) for longitudinal data analysis. It estimates parameters using a
penalized quantile regression approach within a GEE framework, allowing for
different working correlation structures.

This function implements Quantile Penalized Generalized Estimating Equations
(QPGEE) for longitudinal data analysis. It estimates parameters using a
penalized quantile regression approach within a GEE framework, allowing for
different working correlation structures.
}
\examples{
# Example usage:

#data generation settings
n=n_sub=400
p=200
beta0=rep(1,7)
p0=length(beta0)
beta = c(beta0,rep(0,p-p0))
n_obs<-rep(10,n_sub);
ka = 1
rho=0.6
type="ar"
dis="normal"

#generate errors for each subject
e = NULL
id<-NULL
for (i in 1:n_sub){
  id<-c(id,rep(i,n_obs[i]))
  sigmai=Siga_cov(rho,type,n_obs[i])
  if (dis=="normal") ei=mvtnorm::rmvnorm(1, mean=rep(0, n_obs[i]), sigma=sigmai)
  if (dis=="t") ei=mvtnorm::rmvt(1, sigmai, df = 4, delta = rep(0, n_obs[i]))
  e=c(e,ei);
}

#generate y and X
N=sum(n_obs)
nk=n_obs
cn = c(0, cumsum(n_obs))
x=X=matrix(rnorm(N*p),N,p)
y=X\%*\%beta+(1+ka*abs(X[,1]))*e

#fit qpgee
qpgee.fit = qpgee(x,y,tau=0.5,nk=n_obs)
qpgee.fit$beta

# Example usage:

#data generation settings
n=n_sub=400
p=200
beta0=rep(1,7)
p0=length(beta0)
beta = c(beta0,rep(0,p-p0))
n_obs<-rep(10,n_sub);
ka = 1
rho=0.6
type="ar"
dis="normal"

#generate errors for each subject
e = NULL
id<-NULL
for (i in 1:n_sub){
  id<-c(id,rep(i,n_obs[i]))
  sigmai=Siga_cov(rho,type,n_obs[i])
  if (dis=="normal") ei=mvtnorm::rmvnorm(1, mean=rep(0, n_obs[i]), sigma=sigmai)
  if (dis=="t") ei=mvtnorm::rmvt(1, sigmai, df = 4, delta = rep(0, n_obs[i]))
  e=c(e,ei);
}

#generate y and X
N=sum(n_obs)
nk=n_obs
cn = c(0, cumsum(n_obs))
x=X=matrix(rnorm(N*p),N,p)
y=X\%*\%beta+(1+ka*abs(X[,1]))*e

#fit qpgee
qpgee.fit = qpgee(x,y,tau=0.5,nk=n_obs)
qpgee.fit$beta

}
